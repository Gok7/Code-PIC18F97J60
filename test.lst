CCS PCH C Compiler, Version 4.091, 48179               14-déc.-12 14:20

               Filename: test.lst

               ROM used: 660 bytes (1%)
                         Largest free fragment is 65528
               RAM used: 9 (0%) at main() level
                         17 (0%) worst case
               Stack:    4 locations

*
00000:  GOTO   01DC
.................... #include<18F97J60.h> 
.................... //////// Standard Header file for the PIC18F97J60 device //////////////// 
.................... #device PIC18F97J60 
.................... #list 
....................  
.................... #use delay(clock=25M) 
000AC:  CLRF   FEA
000AE:  MOVLW  0B
000B0:  MOVWF  FE9
000B2:  MOVF   FEF,W
000B4:  BZ    00D2
000B6:  MOVLW  08
000B8:  MOVWF  01
000BA:  CLRF   00
000BC:  DECFSZ 00,F
000BE:  BRA    00BC
000C0:  DECFSZ 01,F
000C2:  BRA    00BA
000C4:  MOVLW  19
000C6:  MOVWF  00
000C8:  DECFSZ 00,F
000CA:  BRA    00C8
000CC:  BRA    00CE
000CE:  DECFSZ FEF,F
000D0:  BRA    00B6
000D2:  RETLW  00
.................... #include "LCD_PicDemNet.C" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD_PicDemNet.C   					   //// 
.................... ////				          Modification par JBC                     //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //  H0    enable     
.................... //  H2     rs		  
.................... //  H1     rw 
.................... //  E0 à E7  D0 à D7 de l'afficheur 
....................  
.................... #bit rs=0xf87.2    //Port H 
.................... #bit rw=0xf87.1 
.................... #bit enable=0xf87.0 
....................  
.................... #locate Lcd_Data = 0xF84 //Port E 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE ValeurLue; 
....................       //set_tris_lcd(LCD_READ); 
.................... 	  set_tris_H(0b11111000); //E, RS et RW en sortie 
000D4:  MOVLW  F8
000D6:  MOVWF  F99
.................... 	  set_tris_E(0b11111111); // LCD en lecture	 
000D8:  MOVLW  FF
000DA:  MOVWF  F96
....................       rw = 1; 
000DC:  BSF    F87.1
....................       delay_cycles(1); 
000DE:  NOP   
....................       enable = 1; 
000E0:  BSF    F87.0
....................       delay_cycles(1); 
000E2:  NOP   
....................       ValeurLue = Lcd_Data; 
000E4:  MOVFF  F84,11
....................       enable = 0; 
000E8:  BCF    F87.0
....................       set_tris_E(0b00000000); // LCD en écriture	 
000EA:  MOVLW  00
000EC:  MOVWF  F96
....................       return(ValeurLue); 
000EE:  MOVFF  11,01
.................... } 
000F2:  GOTO   00FA (RETURN)
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       rs = 0; 
000F6:  BCF    F87.2
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
000F8:  BRA    00D4
000FA:  MOVFF  01,11
000FE:  BTFSC  01.7
00100:  BRA    00F8
....................       rs = address; 
00102:  BTFSS  0F.0
00104:  BCF    F87.2
00106:  BTFSC  0F.0
00108:  BSF    F87.2
....................       delay_cycles(1); 
0010A:  NOP   
....................       rw = 0; 
0010C:  BCF    F87.1
....................       delay_cycles(1); 
0010E:  NOP   
....................       enable = 0; 
00110:  BCF    F87.0
.................... 	  Lcd_Data = n; 
00112:  MOVFF  10,F84
.................... 	  delay_cycles(1); 
00116:  NOP   
....................       enable = 1; 
00118:  BSF    F87.0
....................       delay_us(2); 
0011A:  MOVLW  03
0011C:  MOVWF  00
0011E:  DECFSZ 00,F
00120:  BRA    011E
00122:  BRA    0124
....................       enable = 0; 
00124:  BCF    F87.0
....................        
.................... } 
00126:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     
....................     set_tris_E(0b00000000); // LCD en écriture 
00128:  MOVLW  00
0012A:  MOVWF  F96
....................     rs = 0; 
0012C:  BCF    F87.2
....................     rw = 0; 
0012E:  BCF    F87.1
....................     enable = 0; 
00130:  BCF    F87.0
....................     delay_ms(50); 
00132:  MOVLW  32
00134:  MOVWF  0B
00136:  RCALL  00AC
.................... 	lcd_send_byte(0,0b00111100); 
00138:  CLRF   0F
0013A:  MOVLW  3C
0013C:  MOVWF  10
0013E:  RCALL  00F6
.................... 	delay_us(50); 
00140:  MOVLW  67
00142:  MOVWF  00
00144:  DECFSZ 00,F
00146:  BRA    0144
00148:  BRA    014A
.................... 	lcd_send_byte(0,0b00001100); 
0014A:  CLRF   0F
0014C:  MOVLW  0C
0014E:  MOVWF  10
00150:  RCALL  00F6
.................... 	delay_us(50); 
00152:  MOVLW  67
00154:  MOVWF  00
00156:  DECFSZ 00,F
00158:  BRA    0156
0015A:  BRA    015C
.................... 	lcd_send_byte(0,0x01); 
0015C:  CLRF   0F
0015E:  MOVLW  01
00160:  MOVWF  10
00162:  RCALL  00F6
.................... 	delay_ms(2); 
00164:  MOVLW  02
00166:  MOVWF  0B
00168:  RCALL  00AC
.................... 	lcd_send_byte(0,0b00000110); 
0016A:  CLRF   0F
0016C:  MOVLW  06
0016E:  MOVWF  10
00170:  RCALL  00F6
.................... 	 
.................... 	} 
00172:  GOTO   01FE (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
00176:  DECFSZ 0C,W
00178:  BRA    017C
0017A:  BRA    0182
....................      address=lcd_line_two; 
0017C:  MOVLW  40
0017E:  MOVWF  0D
....................    else 
00180:  BRA    0184
....................      address=0; 
00182:  CLRF   0D
....................    address+=x-1; 
00184:  MOVLW  01
00186:  SUBWF  0B,W
00188:  ADDWF  0D,F
....................    lcd_send_byte(0,0x80|address); 
0018A:  MOVF   0D,W
0018C:  IORLW  80
0018E:  MOVWF  0E
00190:  CLRF   0F
00192:  MOVWF  10
00194:  RCALL  00F6
.................... } 
00196:  GOTO   01DA (RETURN)
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
0019A:  MOVF   0A,W
0019C:  XORLW  0C
0019E:  BZ    01AA
001A0:  XORLW  06
001A2:  BZ    01BA
001A4:  XORLW  02
001A6:  BZ    01C4
001A8:  BRA    01CE
....................      case '\f'   : lcd_send_byte(0,1); 
001AA:  CLRF   0F
001AC:  MOVLW  01
001AE:  MOVWF  10
001B0:  RCALL  00F6
....................                    delay_ms(2); 
001B2:  MOVLW  02
001B4:  MOVWF  0B
001B6:  RCALL  00AC
....................                                            break; 
001B8:  BRA    01DA
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
001BA:  MOVLW  01
001BC:  MOVWF  0B
001BE:  MOVLW  02
001C0:  MOVWF  0C
001C2:  BRA    0176
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
001C4:  CLRF   0F
001C6:  MOVLW  10
001C8:  MOVWF  10
001CA:  RCALL  00F6
001CC:  BRA    01DA
....................      default     : lcd_send_byte(1,c);     break; 
001CE:  MOVLW  01
001D0:  MOVWF  0F
001D2:  MOVFF  0A,10
001D6:  RCALL  00F6
001D8:  BRA    01DA
....................    } 
.................... } 
001DA:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     rs=1; 
....................     value = lcd_read_byte(); 
....................     rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #fuses HS,NOWDT 
.................... #use fast_io(B) 
....................  
....................  
.................... void main(){ 
001DC:  CLRF   FF8
001DE:  BCF    FD0.7
001E0:  CLRF   FEA
001E2:  CLRF   FE9
001E4:  MOVF   FC1,W
001E6:  ANDLW  C0
001E8:  MOVWF  FC1
001EA:  MOVLW  07
001EC:  MOVWF  FB4
.................... 	int bouton=1;//si 0 alors appui,si 1 alors relaché 
001EE:  MOVLW  01
001F0:  MOVWF  06
.................... 	int entree=0; 
001F2:  CLRF   07
.................... 	int masque=0b00001111; 
001F4:  MOVLW  0F
001F6:  MOVWF  08
.................... 	SET_TRIS_B(0xFF);//en entree 
001F8:  MOVLW  FF
001FA:  MOVWF  F93
.................... 	lcd_init(); 
001FC:  BRA    0128
....................  
.................... 	while(true){//a modifier 
.................... 		bouton=input_B(); 
001FE:  MOVFF  F81,06
.................... 		entree=masque&bouton; 
00202:  MOVF   08,W
00204:  ANDWF  06,W
00206:  MOVWF  07
.................... 		switch (entree){ 
00208:  MOVF   07,W
0020A:  XORLW  0E
0020C:  BZ    021C
0020E:  XORLW  03
00210:  BZ    0232
00212:  XORLW  06
00214:  BZ    0248
00216:  XORLW  0C
00218:  BZ    025E
0021A:  BRA    0274
.................... 		 
.................... 			case 0b00001110: printf(lcd_putc,"\f bouton 1"); 
0021C:  CLRF   09
0021E:  MOVF   09,W
00220:  RCALL  0004
00222:  INCF   09,F
00224:  MOVWF  00
00226:  MOVWF  0A
00228:  RCALL  019A
0022A:  MOVLW  0A
0022C:  SUBWF  09,W
0022E:  BNZ   021E
.................... 					 
.................... 			break; 
00230:  BRA    028A
.................... 			case 0b00001101: printf(lcd_putc,"\f bouton 2 "); 
00232:  CLRF   09
00234:  MOVF   09,W
00236:  RCALL  0024
00238:  INCF   09,F
0023A:  MOVWF  00
0023C:  MOVWF  0A
0023E:  RCALL  019A
00240:  MOVLW  0B
00242:  SUBWF  09,W
00244:  BNZ   0234
.................... 			break; 
00246:  BRA    028A
.................... 			case 0b00001011: printf(lcd_putc,"\f bouton 3"); 
00248:  CLRF   09
0024A:  MOVF   09,W
0024C:  RCALL  0044
0024E:  INCF   09,F
00250:  MOVWF  00
00252:  MOVWF  0A
00254:  RCALL  019A
00256:  MOVLW  0A
00258:  SUBWF  09,W
0025A:  BNZ   024A
.................... 				 
.................... 			break; 
0025C:  BRA    028A
.................... 			case 0b00000111: printf(lcd_putc,"\f bouton 4"); 
0025E:  CLRF   09
00260:  MOVF   09,W
00262:  RCALL  0064
00264:  INCF   09,F
00266:  MOVWF  00
00268:  MOVWF  0A
0026A:  RCALL  019A
0026C:  MOVLW  0A
0026E:  SUBWF  09,W
00270:  BNZ   0260
.................... 					 
.................... 			break; 
00272:  BRA    028A
.................... 			default :printf(lcd_putc,"\fVeuillez appuyez\n"); 
00274:  CLRF   09
00276:  MOVF   09,W
00278:  RCALL  0084
0027A:  INCF   09,F
0027C:  MOVWF  00
0027E:  MOVWF  0A
00280:  RCALL  019A
00282:  MOVLW  12
00284:  SUBWF  09,W
00286:  BNZ   0276
.................... 					 
.................... 			break; 
00288:  BRA    028A
.................... 		}	 
.................... 	delay_ms(100); 
0028A:  MOVLW  64
0028C:  MOVWF  0B
0028E:  RCALL  00AC
.................... 	} 
00290:  BRA    01FE
.................... } 
00292:  SLEEP 

Configuration Fuses:
   Word  1: F480   NODEBUG NOXINST NOSTVREN NOWDT NOPROTECT
   Word  2: FFC4   HS WDT32768 FCMEN IESO PRIMARY
   Word  3: F7F8   CCP2C1 ECCPE ETHLED WAIT BW16 MCU EASHFT
